name: Build and Package Binaries

on:
  push:
    tags:
      - '*'  # Trigger on tag pushes, for versioning
env:
  PYTHON_VERSION: "3.13"  # Python version
  VERSION: ${{ github.ref_name }}  # GitHub reference name (e.g., tag)
  
jobs:
  build:
    strategy:
      matrix:
        os: [macos-13, macos-14, windows-latest, ubuntu-latest]
        include:
          - os: macos-13
            arch: x86_64  # macOS Intel
            artifact_name: tvhplayer-${{ env.VERSION }}-macos-intel-x86
          - os: macos-14
            arch: arm64  # macOS ARM64 (M1/M2)
            artifact_name: tvhplayer-${{ env.VERSION }}-macos-arm64
          - os: windows-latest
            arch: amd64
            artifact_name: tvhplayer-${{ env.VERSION }}-windows.exe
          - os: ubuntu-latest
            arch: amd64
            artifact_name: tvhplayer-${{ env.VERSION }}-linux

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Get the version from the latest tag
        id: version
        run: echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Build executable
        run: |
          ARTIFACT_NAME="${{ matrix.artifact_name }}-${VERSION}"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            pyinstaller --onefile setup.py --name=${ARTIFACT_NAME}
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            pyinstaller --onefile setup.py --name=${ARTIFACT_NAME}
          else
            pyinstaller --onefile setup.py --name=${ARTIFACT_NAME}.exe
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}-${{ github.ref_name }}
          path: dist/${{ matrix.artifact_name }}-${VERSION}*

      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }} (${VERSION})"
          body: "Auto-generated release for version ${{ github.ref_name }} (${VERSION})"
          files: dist/${{ matrix.artifact_name }}-${VERSION}*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}